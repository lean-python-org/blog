<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The When of Python Blog</title><link href="https://when-of-python.github.io/blog/" rel="alternate"></link><link href="https://when-of-python.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>https://when-of-python.github.io/blog/</id><updated>2022-09-02T09:00:00+12:00</updated><subtitle>
&lt;div class="text-muted" style="padding-bottom: 10px;"&gt;Guidance on when to use Python features (and when not to)&lt;/div&gt;
&lt;div class="text-muted" style="padding-bottom: 10px;"&gt;Comment your opinions on our articles to join the discussion.&lt;/div&gt;
&lt;div class="text-muted" style="padding-bottom: 10px;"&gt;Follow us on &lt;a href="https://twitter.com/WhenOfPython"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/when-of-python"&gt;GitHub&lt;/a&gt; to get the latest updates first.&lt;/div&gt;
</subtitle><entry><title>Feature Creep vs Easy On-Ramp</title><link href="https://when-of-python.github.io/blog/feature-creep-vs-easy-onramp.html" rel="alternate"></link><published>2022-09-02T09:00:00+12:00</published><updated>2022-09-02T09:00:00+12:00</updated><author><name>Ben Denham (with Grant Paton-Simpson)</name></author><id>tag:when-of-python.github.io,2022-09-02:/blog/feature-creep-vs-easy-onramp.html</id><summary type="html">&lt;p&gt;Experience with the X-Wing Miniatures Game provides a lesson for the Python community.
We need to find a way to strip things back so it is easier (again) for beginners to learn the language.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Learning Python&lt;/h2&gt;
&lt;p&gt;Python has a deep heritage as a learning language.  The creator of
Python, Guido van Rossum, worked for several years on
&lt;a href="https://en.wikipedia.org/wiki/ABC_(programming_language)"&gt;ABC&lt;/a&gt; which
was intended for teaching and prototyping.  Python was born out of
that context (see &lt;a href="https://python-course.eu/python-tutorial/history-and-philosophy-of-python.php"&gt;History and Philosophy of Python: Easy as
ABC&lt;/a&gt;)
and learnability is baked into its DNA.&lt;/p&gt;
&lt;p&gt;As we were developing the ideas that would lead to the When of Python,
we started thinking about whether Python was still as easy to learn as
it used to be, given there is now often more than "one obvious way" to
do things. We also wondered whether having a variety options for how
to approach a task was necessarily a bad thing; it provides greater
flexibility to the user after all.&lt;/p&gt;
&lt;p&gt;This got me thinking about my experience with the X-Wing Miniatures Game...&lt;/p&gt;
&lt;h2&gt;The X-Wing Miniatures Game&lt;/h2&gt;
&lt;p&gt;&lt;img alt="X-Wing miniatures" src="images/xwing.jpg"&gt;&lt;/p&gt;
&lt;p&gt;A few years ago I started playing the X-Wing Miniatures Game. Compared
to similar games, the simplicity of the game was a major drawcard,
because it meant that I could easily teach my friends how to play!
Instead of having a hardback rulebook with hundreds of pages, all you
needed to get going was a lightweight rules pamphlet and a handful of
cards and tokens:&lt;/p&gt;
&lt;p&gt;&lt;img alt="X-Wing core rules" src="images/xwing-core.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Like many games, over time they released new expansions to provide new
possibilities for your squadron. Not only did each expansion add a new
ship to the game, but they also added new pilot abilities, ship
upgrades, and game mechanics:&lt;/p&gt;
&lt;p&gt;&lt;img alt="An X-Wing expansion" src="images/xwing-expansion.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Each new expansion was a welcome addition for veteran players, as it
helped keep the game fresh and exciting. However, after a few years of
expansions, the sheer volume of added rules had created a steep
learning curve that made the game unapproachable to beginners:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Lots more X-Wing rules" src="images/xwing-all.png"&gt;&lt;/p&gt;
&lt;p&gt;In the end, the game designers had to release a second edition to
drastically simplify the game because it had simply become too
complex:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"...it got more complicated, making it less easy to jump into the proverbial cockpit."
 &lt;br&gt;&lt;a href="https://www.starwars.com/news/x-wing-second-edition"&gt;Fantasy Flight Games Hits Lightspeed with X-Wing Second Edition&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Releasing a second edition was no small endeavour: every player had to
replace all of their existing cards and tokens with updated versions.&lt;/p&gt;
&lt;h2&gt;Learnability&lt;/h2&gt;
&lt;p&gt;Like X-Wing, learnability has been a big part of Python's
success. Python recently surpassed Java as the top learning language
in universities:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Headline: Python bumps off Java as top learning language (infoworld.com)" src="images/universities-headline.png"&gt;&lt;/p&gt;
&lt;p&gt;That success has been attributed to its simplicity:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Python possesses a mix of qualities that makes it a good candidate for universities. It has a simpler syntax than Java or C++, allowing novices to start writing programs almost immediately.
&lt;br&gt;&lt;a href="https://www.infoworld.com/article/2452940/python-bumps-off-java-as-top-learning-language.html"&gt;Python bumps off Java as top learning language - Eight out of the top 10 universities now use Python to introduce programming - Joab Jackson&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And just last year, Python became the most popular language on the
TIOBE index:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Headline: Python ends C and Java's 20-year reign atop the TIOBE index (techreublic.com)" src="images/tiobe-headline.png"&gt;&lt;/p&gt;
&lt;p&gt;Again, simplicity is arguably a major factor in that
success:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Python, which started as a simple scripting language, as an alternative to Perl, has become mature. Its ease of learning, its huge amount of libraries and its widespread use in all kinds of domains, has made it the most popular programming language of today," said TIOBE CEO Paul Jansen.
&lt;br&gt;&lt;a href="https://www.techrepublic.com/article/python-ends-c-and-javas-20-year-reign-atop-the-tiobe-index/"&gt;Python ends C and Javaâ€™s 20-year reign atop the TIOBE index - Brandon Vigliarolo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Threats to Python's Learnability&lt;/h2&gt;
&lt;p&gt;But how easy is it really to learn modern Python?  In order to
confidently read code, we have to be familar with all the language
features that we're likely to come across, Consider how much more
needs to be at least mentioned in a Python crash-course today compared
to just 10 years ago. We now have type hinting, f-strings, the
wonderfully-named walrus operator (&lt;code&gt;:=&lt;/code&gt;), positional-only parameters,
and structural pattern matching (&lt;code&gt;match&lt;/code&gt;). And that's just what's been
added in the last 10 years!&lt;/p&gt;
&lt;p&gt;With so much more to learn, Python risks becoming unapproachable to
beginners, especially those who aren't full-time software engineers,
such as scientists, school teachers, and data analysts.&lt;/p&gt;
&lt;p&gt;By alienating those users that have made Python so widespread,
Python's language creep could ultimately threaten its popularity.&lt;/p&gt;
&lt;h2&gt;The When of Python&lt;/h2&gt;
&lt;p&gt;Guidance on when to use Python features, and when not to, could
radically simplify the task of learning (and teaching) Python. The
When of Python could achieve this by eventually capturing a community
consensus on the features to associate with &lt;strong&gt;Common Python&lt;/strong&gt;,
&lt;strong&gt;Situational Python&lt;/strong&gt;, and &lt;strong&gt;Deprecated Python&lt;/strong&gt;. In short, the When
of Python could help Python remain true to its teaching language
roots, which have been such a crucial ingredient in its huge success
to date, and hopefully will remain so!&lt;/p&gt;</content><category term="Python"></category><category term="learners"></category><category term="analogies"></category></entry><entry><title>The Who of Python</title><link href="https://when-of-python.github.io/blog/who-of-python.html" rel="alternate"></link><published>2022-09-01T22:02:00+12:00</published><updated>2022-09-01T22:02:00+12:00</updated><author><name>Grant Paton-Simpson</name></author><id>tag:when-of-python.github.io,2022-09-01:/blog/who-of-python.html</id><summary type="html">&lt;p&gt;Python is used by very different groups of people
and how we decide which features are Common Python and
which are Situational Python must take that into account.
If something is common to one group only
e.g. data scientists, or enterpise web application developers, it should be considered Situational Python - even if the use case is very common for that group.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python is used by very different groups of people
and how we decide which features are Common Python and
which are Situational Python
must take that into account.
If something is common to one group only
e.g. data scientists, or enterpise web application developers, it should be considered Situational Python
even if the use case is very common for that group.&lt;/p&gt;
&lt;p&gt;Nick Coghlan loosely and tentatively divided Python use cases up in a 2017 blog post (&lt;a href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience.html"&gt;Considering Python's Target Audience Nick Coghlan 2017-10-09&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Education&lt;/li&gt;
&lt;li&gt;Personal automation &amp;amp; hobby projects&lt;/li&gt;
&lt;li&gt;Organisational process automation&lt;/li&gt;
&lt;li&gt;Set-and-forget infrastructure&lt;/li&gt;
&lt;li&gt;Continuously upgraded infrastructure&lt;/li&gt;
&lt;li&gt;Intermittently upgraded standard operating environments&lt;/li&gt;
&lt;li&gt;Ephemeral software&lt;/li&gt;
&lt;li&gt;Regular use applications&lt;/li&gt;
&lt;li&gt;Shared abstraction layers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;He also suggested that largest split in Python's user base is between Python as a scripting language and Python as an application development language.&lt;/p&gt;
&lt;p&gt;Another useful split would be between full-time developers and people who are astronomers, biologists etc first, and developers second.&lt;/p&gt;
&lt;p&gt;However we divide things up the main point is that there is no such thing
as an Everyday Python that is the same for everyone.
But having said this, there is still a need for a Common Python so we can all basically &lt;em&gt;read&lt;/em&gt; each other's work.&lt;/p&gt;</content><category term="Python"></category><category term="language users"></category><category term="learners"></category><category term="teachers"></category><category term="web"></category><category term="data science"></category><category term="scripting"></category><category term="application development"></category></entry><entry><title>One Obvious Way - An Ongoing Challenge</title><link href="https://when-of-python.github.io/blog/one-obvious-way.html" rel="alternate"></link><published>2022-09-01T22:01:00+12:00</published><updated>2022-09-01T22:01:00+12:00</updated><author><name>Grant Paton-Simpson</name></author><id>tag:when-of-python.github.io,2022-09-01:/blog/one-obvious-way.html</id><summary type="html">&lt;p&gt;Python prides itself on having one obvious way to do things
but it is more of an ideal than a reality sometimes.
But we should still aim in that direction.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;From the Zen of Python to the When of Python&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python prides itself on having one obvious way to do things
but it is more of an ideal than a reality sometimes.
Nonetheless we should aim in that direction to increase code readability
and reduce the barriers to learning and mastering Python.&lt;/p&gt;
&lt;p&gt;The When of Python will hopefully make it easier to identify the preferred approaches to general tasks,
and the preferred alternatives for specific situations.&lt;/p&gt;
&lt;h2&gt;True 11 years ago, true today&lt;/h2&gt;
&lt;p&gt;It was spooky reading a post of Nick Coghlan's from eleven years ago.
It harmonises very well with a key concern of the When of Python - namely, making Python easier for learners.
And not just people starting off as full-time developers.
Python also needs to work for people who are astronomers, biologists etc first, and developers second.
Anyway, here is what Nick had to say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What do you mean by "cognitive burden"?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Even without considering the near-term cost of changes, every addition to the language (and even the standard library) imposes a potential burden on anyone learning the language in the future. You can't just say, "Oh, I won't worry about learning that feature" if the code base you've been asked to maintain uses it, or if it is offered as an answer to a query posted on python-list or Stack Overflow or the like. The principle of "There Should Be One - and preferably only one - Obvious Way To Do It" is aimed squarely at reducing the cognitive load on people trying to learn the language. Quite clearly, the "only one" aspect is an ideal rather than a practical reality (two kinds of string formatting and three argument parsing libraries in the standard library all say "Hi!"), but in such cases we do try to indicate that the most recently added (and hopefully least quirky) approach is the preferred way to do it.&lt;/p&gt;
&lt;p&gt;(&lt;a href="https://www.curiousefficiency.org/posts/2011/04/musings-on-culture-of-python-dev.html"&gt;Musings on the culture of python-dev  Nick Coghlan 2011-04-21&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking back from 2022, we've managed to simplify argument parsing. As far as string formatting goes, though, we now have four approaches! Oh well - two steps forward, one step back.
Perhaps developing a When of Python will help.
As we said in our Kiwi PyCon presentation, newer is not always better (or worse for that matter)
so more explicit guidance is probably helpful.&lt;/p&gt;</content><category term="Python"></category><category term="python"></category><category term="learners"></category><category term="teaching"></category></entry><entry><title>Welcome to the When of Python</title><link href="https://when-of-python.github.io/blog/welcome-to-when-of-python.html" rel="alternate"></link><published>2022-09-01T22:00:00+12:00</published><updated>2022-09-01T22:00:00+12:00</updated><author><name>Grant Paton-Simpson</name></author><id>tag:when-of-python.github.io,2022-09-01:/blog/welcome-to-when-of-python.html</id><summary type="html">&lt;p&gt;The When of Python is a fledgling community initiative.
The goal is to effectively shrink Python so it fits our brains
by providing guidance on when we should use particular language features
(and when we should not).&lt;/p&gt;</summary><content type="html">&lt;p&gt;The When of Python is a fledgling community initiative.
The goal is to effectively shrink Python so it fits our brains
by providing guidance on when we should use particular language features
(and when we should not).&lt;/p&gt;
&lt;p&gt;We start with &lt;strong&gt;Common Python&lt;/strong&gt; - the features we should all know so we can basically read each other's work.
Clarity on this will be especially useful for teachers and anyone learning Python.&lt;/p&gt;
&lt;p&gt;Then there is &lt;strong&gt;Situational Python&lt;/strong&gt; - the Python features that are useful
but not for everyone or not all the time. It depends on the situation, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web development might need very different features than scientific Python, e.g. asyncio&lt;/li&gt;
&lt;li&gt;Advanced library code might need advanced features, e.g. low-level threading / multi-processing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For each feature we try to provide guidance on
what the situations are where it is the preferred One Obvious Way.
The situations might be defined by domain (e.g. web application development vs data science)
or type of code (e.g. scripting vs code with enterprise responsibilities).&lt;/p&gt;
&lt;p&gt;Finally there is &lt;strong&gt;Deprecated Python&lt;/strong&gt; - the features we should avoid using.
And maybe we should go even further than that - perhaps working through existing code
and expunging some features in favour of better alternatives.
Soon(ish) we are planning to release some tools to make that easier.&lt;/p&gt;
&lt;h2&gt;Initial Resources&lt;/h2&gt;
&lt;p&gt;The When of Python" presentation as delivered at Kiwi Pycon 2022, and an addendum of post-conference refinements:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://when-of-python.github.io/kiwipycon2022"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Original presentation:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=JnY5MEiqG44"&gt;The When of Python&lt;/a&gt;&lt;/p&gt;</content><category term="Python"></category><category term="learners"></category><category term="teachers"></category></entry></feed>